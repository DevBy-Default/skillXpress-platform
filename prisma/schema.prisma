generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  studentProfile StudentProfile?
  company        Company?
  applications   Application[]
  assignments    Assignment[]
  ratings        Rating[]       @relation("RaterRatings")
  receivedRatings Rating[]      @relation("RateeRatings")
  certifications Certification[]
  messages       Message[]
  eventLogs      EventLog[]

  @@map("users")
}

model StudentProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  education      String?
  skills         String   // JSON array
  interests      String   // JSON array
  aspirationTags String   // JSON array
  availability   String?
  resumeUrl      String?
  portfolioUrls  String   // JSON array
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model Company {
  id           String   @id @default(cuid())
  userId       String   @unique
  name         String
  website      String?
  industryTags String   // JSON array
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]

  @@map("companies")
}

model Project {
  id             String        @id @default(cuid())
  companyId      String
  title          String
  summary        String
  requiredSkills String        // JSON array
  deliverables   String        // JSON array
  difficulty     Difficulty
  timeboxDays    Int
  openings       Int
  status         ProjectStatus @default(DRAFT)
  budgetCredits  Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications  Application[]
  assignments   Assignment[]
  certifications Certification[]
  ratings       Rating[]
  messageThread MessageThread?

  @@index([status])
  @@index([companyId])
  @@map("projects")
}

model Application {
  id         String            @id @default(cuid())
  projectId  String
  studentId  String
  status     ApplicationStatus @default(APPLIED)
  matchScore Float
  rationale  String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([projectId, studentId])
  @@index([studentId])
  @@index([status])
  @@map("applications")
}

model Assignment {
  id        String   @id @default(cuid())
  projectId String
  studentId String
  pmId      String
  startAt   DateTime
  dueAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student    User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  milestones Milestone[]

  @@index([studentId])
  @@index([pmId])
  @@map("assignments")
}

model Milestone {
  id           String          @id @default(cuid())
  assignmentId String
  title        String
  description  String
  dueAt        DateTime
  status       MilestoneStatus @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  assignment  Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@index([assignmentId])
  @@index([status])
  @@map("milestones")
}

model Submission {
  id             String           @id @default(cuid())
  milestoneId    String
  note           String
  attachmentUrls String           // JSON array
  submittedAt    DateTime         @default(now())
  status         SubmissionStatus @default(SUBMITTED)
  updatedAt      DateTime         @updatedAt

  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@index([milestoneId])
  @@index([status])
  @@map("submissions")
}

model Certification {
  id          String   @id @default(cuid())
  studentId   String
  projectId   String
  verifierId  String
  issuedAt    DateTime @default(now())
  badgeSvg    String
  payloadHash String

  student   User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  verifier  User    @relation(fields: [verifierId], references: [id])

  @@index([studentId])
  @@map("certifications")
}

model Rating {
  id        String   @id @default(cuid())
  raterId   String
  rateeId   String
  projectId String
  score     Int
  feedback  String?
  createdAt DateTime @default(now())

  rater   User    @relation("RaterRatings", fields: [raterId], references: [id], onDelete: Cascade)
  ratee   User    @relation("RateeRatings", fields: [rateeId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([rateeId])
  @@map("ratings")
}

model Taxonomy {
  id       String       @id @default(cuid())
  type     TaxonomyType
  name     String
  synonyms String       // JSON array

  @@unique([type, name])
  @@map("taxonomy")
}

model MessageThread {
  id        String   @id @default(cuid())
  projectId String   @unique
  createdAt DateTime @default(now())

  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("message_threads")
}

model Message {
  id       String   @id @default(cuid())
  threadId String
  senderId String
  body     String
  createdAt DateTime @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@map("messages")
}

model EventLog {
  id       String   @id @default(cuid())
  actorId  String
  action   String
  entity   String
  entityId String
  ts       DateTime @default(now())
  metadata String   // JSON

  actor User @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@index([entity, entityId])
  @@index([ts])
  @@map("event_logs")
}

enum Role {
  STUDENT
  COMPANY
  PM
  ADMIN
}

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  ASSIGNED
  REJECTED
  WITHDRAWN
}

enum MilestoneStatus {
  PENDING
  SUBMITTED
  ACCEPTED
  CHANGES_REQUESTED
}

enum SubmissionStatus {
  SUBMITTED
  ACCEPTED
  CHANGES_REQUESTED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TaxonomyType {
  SKILL
  INTEREST
  INDUSTRY
}
